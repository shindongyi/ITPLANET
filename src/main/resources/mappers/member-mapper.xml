<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap type="Member" id="memberResultSet">
		<id property="userId" column="USER_ID"/>
		<result property="userPwd" column="USER_PWD"/>
		<result property="userName" column="USER_NAME"/>
		<result property="nickName" column="NICKNAME"/>
		<result property="birthDay" column="BIRTH_DAY"/>
		<result property="gender" column="GENDER"/>
		<result property="email" column="EMAIL"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<result property="status" column="STATUS"/>
		<result property="black" column="BLACK"/>
		<result property="grade" column="GRADE"/>
	</resultMap>
	<resultMap type="map" id="cScrapResultSet"/>
	<resultMap type="map" id="lScrapResultSet"/>
	<resultMap type="map" id="hScrapResultSet"/>
	
	<select id="selectOne" parameterType="Member" resultMap="memberResultSet">
		select * 
		from member
		where user_id=#{userId} and status='Y'
	</select>
	
	<insert id="insertMember" parameterType="Member">
		insert into member
		values(#{userId}, #{userPwd}, #{userName}, 
				#{nickName}, #{birthDay}, #{gender}, 
				#{email}, sysdate, sysdate, default, default, default)
	</insert>
	
	<select id="selectUserId" parameterType="String" resultType="_int">
		select count(*)
		from member
		where user_id = #{userId}
	</select>
	
	<select id="selectNickName" parameterType="String" resultType="_int">
		select count(*)
		from member
		where nickname = #{nickname} and status='Y'
	</select>
	
	<update id="updatePwd" parameterType="Member">
		update member set user_id=#{userId}, user_pwd=#{userPwd} 
	</update>
	
	<select id="findUserId" parameterType="Member" resultType="string">
		select * 
		from member
		where user_name=#{userName} and email=#{email} and status='Y'
	</select>
	
	<select id="findUserPwd" parameterType="Member" resultType="_int">
		select count(*)
		from member
		where user_Id=#{userId} and email=#{email} and user_name=#{userName} and status='Y'
	</select>
	
	<update id="updateMember" parameterType="Member"> 
		update member 
		set user_name=#{userName}, nickname=#{nickName}, birth_day=#{birthDay}, gender=#{gender},
		email=#{email}
		where user_id=#{userId} 
	</update>
	
	<update id="deleteMember" parameterType="string">
		update member
		set status='N'
		where user_id = #{userId}
	</update>
	
	<select id="countComp" parameterType="string" resultType="_int">
		select count(*)
		from c_scrap
		where user_id = #{userId}
	</select>
	
	<select id="countHire" parameterType="string" resultType="_int">
		select count(*)
		from h_scrap
		where user_id = #{userId}
	</select>
	
	<select id="countLcs" parameterType="string" resultType="_int">
		select count(*)
		from l_scrap
		where user_id = #{userId}
	</select>
	
<!-- 	<select id="scrapCount" parameterType="Map" resultType="_int">
		select count(*)
		<choose>
			<when test="scrap == h_scrap">
				from h_scrap
			</when>
			<when test="scrap == c_scrap">
				from c_scrap
			</when>
			<otherwise> 
				from l_scrap
			</otherwise>
		</choose>
		where user_id=#{userId}
	</select> -->
	
	<select id="selectCompScrapList" parameterType="string" resultMap="cScrapResultSet">
		select c_title as TITLE, c_writer as WRITER, c_modify_date as MODIFYDATE, c_count as COUNT
		from c_scrap cs
		join competition c on(cs.c_id = c.c_id)
		join member m on (c.c_writer = m.user_id)
		where cs.user_id = #{userId} and cs.c_id = c.c_id
		order by cs.cs_id desc
	</select>
		
	<select id="selectHireScrapList" parameterType="string" resultMap="hScrapResultSet">
		select h_title as TITLE, hs.user_id as WRITER, h_create_date as MODIFYDATE
		from h_scrap hs
		join hire h on(hs.h_id = h.h_id)
		join member m on (h.user_id = m.user_id)
		where hs.user_id = #{userId} and hs.h_id = h.h_id
		order by hs.hs_id desc
	</select>
	
	<select id="selectLcsScrapList" parameterType="string" resultMap="lScrapResultSet">
		select l.l_name as TITLE, m.nickname as WRITER, l.modify_date as MODIFYDATE, l.l_count as COUNT
		from l_scrap ls
		join license l on(ls.l_id = l.l_id)
		join member m on (l.user_id = m.user_id)
		where ls.user_id = #{userId} and ls.l_id=l.l_id
		order by ls.ls_id desc
	</select>
	
	<select id="recentLcsScrap" parameterType="string" resultType="map">
		<!-- <![CDATA[ -->
        select l.l_name as TITLE, l.l_address as LINK
        from l_scrap ls
        join license l on (l.l_id = ls.l_id)
        where ls.user_id = #{userId} and <![CDATA[rownum < 5]]>
		<if test="keyword == day1">
        and to_date(l.end_date,'YYYY-mm-DD') = to_date(sysdate-1,'YYYY-mm-DD')
        </if>
        <if test="keyword == day2">
        and to_date(l.end_date,'YYYY-mm-DD') = to_date(sysdate-2,'YYYY-mm-DD')
        </if>
		order by ls.ls_id desc
		<!-- ]]> -->
		<!-- 사진등록후 -->
		
<!-- 	select lat.change_name as IMAGENAME, lat.file_path as FILEPATH, l.l_name as TITLE, l.l_address as LINK
		from l_scrap ls
		join license l on (l.l_id = ls.l_id)
		join lattachment lat on (ls.l_id = lat.l_id)
		where ls.user_id = #{userId} and rownum < 5
		<if test="keyword != null">
        and to_date(l.end_date,'YYYY-mm-DD') = to_date(sysdate-${keyword},'YYYY-mm-DD')
        </if>
		order by ls.ls_id desc; -->
	</select>
	
	<select id="recentCompScrap" parameterType="string" resultType="map">
		select cat.change_name as IMAGENAME, cat.file_path as FILEPATH, c.c_title as TITLE
		from c_scrap cs
		join competition c on (c.c_id = cs.cs_id)
		join cattachment cat on (cat.c_id = cs.c_id)
		where cs.user_id = #{userId} and <![CDATA[rownum < 5]]>
<!--  		<if test="keyword == day1">
		and to_date(c.c_duedate,'YYYY-mm-DD') = to_date(sysdate-1,'YYYY-mm-DD')
		</if>
		<if test="keyword == day2">
		and to_date(c.c_duedate,'YYYY-mm-DD') = to_date(sysdate-2,'YYYY-mm-DD')
		</if>   -->
		order by cs.cs_id desc 
	</select>
	
	<select id="recentHireScrap" parameterType="string" resultType="map">
		<!-- <![CDATA[ -->
     	select h.h_title as TITLE, h.location as LOCATION, h.h_info as INFO, h.h_type as HTYPE
		from h_scrap hs
		join hire h on (h.h_id = hs.h_id)
		where hs.user_id = #{userId} and <![CDATA[rownum < 5]]>
<!-- 		<if test="keyword == day1">
		and to_date(h.h_duedate,'YYYY-mm-DD') = to_date(sysdate-1,'YYYY-mm-DD')
		</if>
		<if test="keyword == day2">
		and to_date(h.h_duedate,'YYYY-mm-DD') = to_date(sysdate-2,'YYYY-mm-DD')
		</if> -->
		order by hs.hs_id desc
		<!-- ]]> -->
	</select>
	
<!-- 	<select id="" parameterType="string" resultType="map">
		<![CDATA[
		select h.h_title as TITLE, h.location as LOCATION, h.h_info as INFO, h.h_type as HTYPE
		from h_scrap hs
		join hire h on (h.h_id = hs.h_id)
		where hs.user_id = #{userId} and to_date(h.h_duedate,'YYYY-mm-DD') = to_date(sysdate,'YYYY-mm-DD') and rownum < 5
		order by hs.hs_id desc;
		]]>
	</select> -->
	
</mapper>
